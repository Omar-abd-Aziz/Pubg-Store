/*1*/
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js';
import { getFirestore,getCountFromServer, collection, query, where, getDocs,getDoc, setDoc, addDoc, doc,deleteDoc,onSnapshot,orderBy, limit,startAt, startAfter,endAt } from 'https://www.gstatic.com/firebasejs/10.0.0/firebase-firestore.js';

import { firebaseConfig } from "../firebase.js"
import { docName } from "../firebase.js"


// var firebaseConfig = {
//   apiKey: "AIzaSyCxhFz0o6GZZr0xLC4qBbrDNRJWv2Wi0bI",
//   authDomain: "ordersystem-f3088.firebaseapp.com",
//   projectId: "ordersystem-f3088",
//   storageBucket: "ordersystem-f3088.appspot.com",
//   messagingSenderId: "676460912839",
//   appId: "1:676460912839:web:a6e88519d4f45fc8055ee2",
//   measurementId: "G-6R5MHRT3XJ"
// };

firebase.initializeApp(firebaseConfig);
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

let X;

async function getCit(db,X) {
  const citiesCol = collection(db,`${X}`);
  const citySnapshot = await getDocs(citiesCol);
  const cityList = citySnapshot.docs.map(doc => doc.data());
  return cityList;
}
/*1*/











/* start function return array from db */

let AllProducts;

async function forAllProducts(X){

  const q = query(collection(db, "StoreProducts"), where('isHidden', '==', false), orderBy("date","desc"), limit(X||8));
  const querySnapshot = await getDocs(q);
  const cityList = querySnapshot.docs.map(doc => doc.data());

  let array=cityList;
  
  return array;
};

/* end function return array from db */



async function getProductsForSlider(ProductCategorieName,X){
  let q = query(collection(db, "StoreProducts"), where('ProductCategorieName', '==', ProductCategorieName), where('isHidden', '==', false), orderBy("date","desc"), limit(X||5));
  let querySnapshot = await getDocs(q);
  let cityList = querySnapshot.docs.map(doc => doc.data());

  let array=cityList;
  
  return array;
}




async function showSliderProducts(array, ProductCategorieName){

  sliderNumber+=1;
  let randomNumber = sliderNumber;


  document.querySelector(".mainPage").innerHTML+=
  `
  
  <div style="width: 100% !important; margin: 30px auto; z-index: 0;" class="container swiperMain swiperMainProducts">
    <div style="width: 100%; display: flex; justify-content: space-between; padding: 0px 10px;">

      <div class="s-slider-block__title-nav" dir="rtl" style="display: flex;justify-content: space-between;text-align: center;align-items: center;">
        
        <div>
          <a class="showAllBtn" href="${window.location.origin+"/?categorie="+ProductCategorieName}">عرض الكل</a>
        </div>
        
        <div>
          <button style="background: white;" aria-label="Previous slide" class="s-slider-prev swiper-button-prev${randomNumber} s-slider-nav-arrow" tabindex="0"><span class="s-slider-button-icon"><!-- Generated by IcoMoon.io -->
            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
            <title>keyboard_arrow_right</title>
            <path d="M11.438 22.479l6.125-6.125-6.125-6.125 1.875-1.875 8 8-8 8z"></path>
            </svg>
            </span>
          </button>
          <button style="background: white;" aria-label="Next slide" class="s-slider-next swiper-button-next${randomNumber} s-slider-nav-arrow "><span class="s-slider-button-icon"><!-- Generated by IcoMoon.io -->
            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
            <title>keyboard_arrow_left</title>
            <path d="M20.563 22.104l-1.875 1.875-8-8 8-8 1.875 1.875-6.125 6.125z"></path>
            </svg>
            </span>
          </button>
        </div>

      </div>
      <div class="ProductCategorieNameDiv">
        <h3  style="align-self: center; margin: 0;"> ${ProductCategorieName} </h3>
      </div>
    </div>
    <div class="swiper swiper${randomNumber} swiperProducts" style="padding: 10px; box-shadow: none;" dir="rtl">
      <div class="swiper-wrapper swiper-wrapper${randomNumber}" >

      </div>
    </div>
  </div>

  
  
  `;




  array.forEach(e=>{

    document.querySelector(`.swiper-wrapper${randomNumber}`).innerHTML+=`
    <div class="swiper-slide" style="height: auto!important;">
  
      <div class="card" style="height:100%;">
          <div class="CardImgDad">
            <a href="?product=${e.id}" style="height: 100%; ">
              <img src="${e.ProductImage||e.ArrayOfProductImages[0].src}" class="card-img-top cardImg" style="height: auto;" >
            </a>
          </div>
  
          <div class="card-body">
              <bdi class="card-title text-color cardName">${e.ProductName}</bdi>
              <p class="priceDad">
                
                  <del class="ProductPriceBeforeRivalSpan">${e.ProductPriceBeforeRival||""}</del>
                  
                  <span class="price">${e.ProductPrice}</span>
                  <span style="font-weight: bold;">${currency}</span>
              </p>
              <div class="btn btn-outline-success btnForAddToCard" data-note="${e.ProductNote}" data-id="${e.id}"> إضافة للسلة  </div>
              
          </div>
          <div style="font-size: 18px; font-weight: 500;">
            <p>
            كود المنتج : ${e.id}
            </p>
          </div>
      </div>
    </div>
      
    `;
  
  });



  let swiper1 = new Swiper('.swiper1', {
    // Optional parameters
    autoplay: {
      delay: 3000,
    },
    direction: 'horizontal',
    loop: true,
  
  
    pagination: {
      el: '.swiper-pagination1',
      clickable: true,
    },
  
    
    navigation: {
      nextEl: '.swiper-button-next1',
      prevEl: '.swiper-button-prev1',
    },
  
    // scrollbar: {
    //   el: '.swiper-scrollbar1',
    // },
  });
  



  for(let i =101; i<=randomNumber; i++){

    new Swiper(`.swiper${i}`, {
     autoplay: {
       delay: 2000,
     },
     loop: true,
     slidesPerView: 1,
     spaceBetween: 20,
     pagination: {
       el: `.swiper-pagination${i}`,
       clickable: true,
     },
     breakpoints: {
       "@0.00": {
         slidesPerView: 1.50,
         spaceBetween: 10,
       },
       "@0.50": {
         slidesPerView: 1.60,
         spaceBetween: 3,
       },
       "@0.75": {
         slidesPerView: 2.5,
         spaceBetween: 8,
       },
       "@1.00": {
         slidesPerView: 3,
         spaceBetween: 10,
       },
       "@1.50": {
         slidesPerView: 4,
         spaceBetween: 20,
       },
     },
   
     navigation: {
       nextEl: `.swiper-button-next${i}`,
       prevEl: `.swiper-button-prev${i}`,
     },
   });
  
  };


};



















  /* start calc the total price of products in cart */
  function totalPrice()
  {
    let ArrayOfPrie = Array.from(document.querySelectorAll(".totalPriceCard"))
    let TotalPrice = 0
    let numOfCardsHaveAdd=0

    ArrayOfPrie.forEach(e=>{
      numOfCardsHaveAdd++
      TotalPrice+=parseInt(e.innerText)
    })

    document.querySelector(".totalPrice").innerText=`${TotalPrice}`
    document.querySelector(".numOfCardsAdd").innerText=numOfCardsHaveAdd;
    saveCartLocal();
  }
  /* start calc the total price of products in cart */



















let ArrayOfProductImags=[];

let arrayOfCardsHadAddToCart = [];

await getCartFromLocal();
const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
const product = urlParams.get('product');
const categorie = urlParams.get('categorie');
let currency = "جنية"
let sliderNumber=100;
if(product==null&&categorie==null){

/* start return the array and pass it to showData function */


  showBannar();


  let arrayOfCategoriesAndProducts = JSON.parse(localStorage.getItem(`${docName}_arrayOfCategoriesAndProducts`));
  if(arrayOfCategoriesAndProducts!==null&&isTimestampGreaterThanDuration(Date.now() ,arrayOfCategoriesAndProducts.time, 2)){
  
    console.log("products from local")
    for(let j=0; j<arrayOfCategoriesAndProducts.Categories.length; j++){
      let categorieName=arrayOfCategoriesAndProducts.Categories[j].name;
      let arrayOfProducts=arrayOfCategoriesAndProducts.arrayOfProducts[j];
      showSliderProducts(arrayOfProducts, categorieName);
    };

  }else{
    console.log("products from database")
    AllStoreCategoriesInSelect();

  }    

  // forAllProducts(8).then(e=>{
  //   AllProducts = e;
  //   ShowAll(e);
  // });


/* end return the array and pass it to showData function */

  
}else if(product==null&&categorie!==null){

  let arrayOfCategoriesAndProductsFromLocal = JSON.parse(localStorage.getItem(`${docName}_arrayOfCategoriesAndProducts`))
  

  if(arrayOfCategoriesAndProductsFromLocal!==null){

    let index = arrayOfCategoriesAndProductsFromLocal.Categories.findIndex(obj => obj.name === `${categorie}`);
    let array = arrayOfCategoriesAndProductsFromLocal.arrayOfProducts[index];

    AllProducts = array;
    ShowAll(array);

    console.log("products from local");

  }else {

    console.log("products from database");

    let q = query(collection(db, "StoreProducts"), where('ProductCategorieName', '==', `${categorie}`), where('isHidden', '==', false), orderBy("date","desc"), limit(X||4));
    let querySnapshot = await getDocs(q);
    let cityList = querySnapshot.docs.map(doc => doc.data());
  
    let array=cityList;
    AllProducts = array;
    ShowAll(array);
    
  }

  document.querySelector("#AllStoreCategories").style.display="none";
  document.querySelector(".swiper1").style.display="none";
  document.querySelector(".CategorieName").textContent=`${categorie}`;





} else if(product!==null&&categorie==null){

  document.querySelector(".mainPage").style.display="none";
  document.querySelector(".productPage").style.display="block";
  document.querySelector(".nav-link").textContent="المتجر";
  document.querySelector(".nav-link").href="./index.html";
  
  await getProductData(product).then(e=>{

    ArrayOfProductImags=e.ArrayOfProductImages;

    let productDivDad=document.querySelector("#productDetails");
    productDivDad.querySelector(".ProductName").textContent=`${e.ProductName}`;
    productDivDad.querySelector(".ProductPrice").textContent=`${e.ProductPrice}`;
    productDivDad.querySelector(".ProductPriceBeforeRivalSpanInProductPage").innerHTML=`
    جنية مصري
    ${(e.ProductPriceBeforeRival==""||e.ProductPriceBeforeRival==undefined)?"":`
    بدلا من
    <del>${e.ProductPriceBeforeRival}</del>
    `}
    
    `;
    productDivDad.querySelector(".ProductNote").textContent=`${e.ProductNote}`;
    productDivDad.querySelector(".ProductId").dataset.id=`${e.id}`;
    productDivDad.querySelector(".productCode").textContent=`
    ${e.id}
    `;
    document.querySelector("#imageSection").querySelector(".ProductImage").src=`${e.ProductImage}`;

    let divElementTest=document.createElement("div");


    if(e.productOrderChoices!==undefined&&e.productOrderChoices.length>0){

      e.productOrderChoices.forEach(e=>{
      
        let x = document.createElement("div")
        e.choices.forEach(el=>{
          x.innerHTML+= `<option value="${el}">${el}</option>`;
        });
        
        divElementTest.innerHTML+=`
              
        <div class="orderCoicesDiv">
          <label class="nameOfChoice" style="order: 1;">${e.name}</label>
        
          <select class="ChoicesSelect">
            ${x.innerHTML}
          </select>
        </div>
        
        `;
      });
      
      
      document.querySelector("#details").innerHTML+=`${divElementTest.innerHTML}`
    };


    if(e.ArrayOfProductImages!==undefined){

      for(let i=0; i<e.ArrayOfProductImages.length; i++){


        let htmlDiv = `

        <div class="swiper-slide" style="width: 100% !important; border-radius: 15px;">
          <img style="width: 100%; border-radius: 15px; padding: 5px;" loading="lazy" src="${e.ArrayOfProductImages[i].src}">
        </div>
  
        `;
  
        document.querySelector(".dadOfImages").insertAdjacentHTML("beforeend", htmlDiv);

      };

    } else {
      document.querySelector("#imageSection").querySelector(".ProductImage").style.display="block";
      document.querySelector(".sliderBtnsDad").style.display="none";
    }

    new Swiper('.swiper2', {
      // Optional parameters
      autoplay: {
        delay: 3000,
      },
      direction: 'horizontal',
      loop: true,


      // pagination: {
      //   el: '.swiper-pagination2',
      // },

      
      navigation: {
        nextEl: '.swiper-button-next2',
        prevEl: '.swiper-button-prev2',
      },

      scrollbar: {
        el: '.swiper-scrollbar2',
      },
    });
   

    document.querySelector(".ProductToAddToCart").addEventListener("click",()=>{

      if(arrayOfCardsHadAddToCart.includes(e.ProductName)==false)
      {
        arrayOfCardsHadAddToCart.push(e.ProductName)
        
        document.querySelector(".divForCardsHasSelc").innerHTML+=`
        
        <div class="cartDiv productNote" data-note="${e.ProductNote}" data-price="${e.ProductPrice}" data-name="${e.ProductName}" data-src="${e.ProductImage}" data-number="">
          <img src="${e.ProductImage}" loading="lazy" class="productImage" loading="lazy">
          <div class="nameOfCardDad">
            <h2 class="productName" data-id="${e.id}">${e.ProductName}</h2>
          </div>
          <div class="priceOfCardDad">
            <h2 class="productPrice">${e.ProductPrice} ${currency}</h2>
          </div>
          <div class="quantityOfCardDad">
            <span class="low">-</span>
            <span style="width: 40px;" class="productAmount">1</span>
            <span class="height">+</span>
          </div>
          <div class="totalPriceOfCardDad">
            <span class="totalPriceCard productTotalPrice">${e.ProductPrice} ${currency}</span>
          </div>
          <div class="delOfCardDad">
            <img src="./Store Folder/images/delete.png" class="btnForDeletFromCart" loading="lazy">
          </div>
        </div>
        
        ` 
      } else {
        Swal.fire(
          'المنتج موجود في السلة بالفعل',
        )
      }
  
      totalPrice();
  

    });

  });

};








/* start function to get product Data */

async function getProductData(productId){
  let productData;


  let q = query(collection(db, "StoreProducts"), where('isHidden', '==', false), where('id', '==', `${productId}`));
  let snapshot = await getCountFromServer(q);

  // console.log(snapshot.data().count);

  if(snapshot.data().count>0){
    await getDoc(doc(db,"StoreProducts",`${productId}`)).then(e=>{
      productData = e.data();
    });
  
    console.log(productData.isHidden)
    return productData;
  }else{
    location.href="./index.html"
  }


};

/* end function to get product Data */






/* start function loadMore start from last eelment and return array from db */

async function loadMore(X){

  console.log(categorie);

  let q = query(collection(db, "StoreProducts"), where('ProductCategorieName', '==', `${categorie}`), where('isHidden', '==', false), orderBy("date","desc"),startAfter(AllProducts[AllProducts.length-1].date), limit(X||4));
  let querySnapshot = await getDocs(q);
  let cityList = querySnapshot.docs.map(doc => doc.data());

  let array=cityList;

  return array;
}


async function loadMoreWithFilter(X){

  const q = query(collection(db, "StoreProducts"), where('isHidden', '==', false),where("ProductCategorieId",'==',`${AllProducts[0].ProductCategorieId}`), orderBy("date","desc"),startAfter(AllProducts[AllProducts.length-1].date), limit(X||8));
  const querySnapshot = await getDocs(q);
  const cityList = querySnapshot.docs.map(doc => doc.data());

  let array=cityList;

  return array;
}

/* end function loadMore start from last eelment and return array from db */








/* start function to show data and display it */

function ShowAll(array){

  document.querySelector("#CategorieProductsDiv").style.display="block";
  
array.forEach(e=>{

  console.log(e.ArrayOfProductImages[0].src)
  document.querySelector(".cardsDad").innerHTML+=`
  
  <div class="card">
      <div class="CardImgDad">
        <a href="?product=${e.id}">
          <img src="${e.ProductImage||e.ArrayOfProductImages[0].src}" class="card-img-top cardImg" loading="lazy">
        </a>
      </div>

      <div class="card-body">
          <bdi class="card-title text-color cardName">${e.ProductName}</bdi>
          <br>
          <bdi class="priceDad">
              
            <del class="ProductPriceBeforeRivalSpan">${e.ProductPriceBeforeRival||""}</del>
            <span class="price">${e.ProductPrice}</span>
            <span style="font-weight: bold;">${currency}</span>

          </bdi>
          <br>
          <div class="btn btn-outline-success btnForAddToCard" data-note="${e.ProductNote}" data-id="${e.id}"> إضافة للسلة  </div>
          
      </div>
      <div style="font-size: 18px; font-weight: 500;">
        <p>
        كود المنتج : ${e.id}
        </p>
      </div>
  </div>
  
  `;

});

};

/* start function to show data and display it */









/*start catch all product in cart and catch user info from inputs and send it to firebase */
document.querySelector(".sendData").addEventListener("click",()=>{




  let AllProductName=document.querySelectorAll(".productName");
  let AllProductPrice=document.querySelectorAll(".productPrice");
  let AllProductNote=document.querySelectorAll(".productNote");
  let AllProductImage=document.querySelectorAll(".productImage");
  let AllProductAmount=document.querySelectorAll(".productAmount");

  let dataStore=[];

  for(let i=0; i<AllProductName.length; i++){
    
    dataStore.push({
      productId: AllProductName[i].dataset.id,
      productName: AllProductName[i].textContent,
      productPrice: parseInt(AllProductPrice[i].textContent),
      productNote: AllProductNote[i].dataset.note,
      productImage: AllProductImage[i].src,
      productAmount: parseInt(AllProductAmount[i].textContent),
      productTotalPrice: parseInt(AllProductPrice[i].textContent)*parseInt(AllProductAmount[i].textContent),
    });
 
  };


  var name = document.querySelector(".NameOfPerson").value.trim()
  var phoneNumber = document.querySelector(".phoneNum").value.trim()
  var address = document.querySelector(".address").value.trim()
  var note = document.querySelector(".noteFromPerson").value.trim()


  if(name!=""&&phoneNumber.length==11&&address!="")
  {


    Swal.fire({
      title: 'Please Wait!',
      didOpen: () => {
        Swal.showLoading()
      }
    });




    let id = (Math.random()*1000000).toFixed();
    setDoc(doc(db,"Persons",`${id}`),{
      id: id,
      name: name,
      phone: phoneNumber,
      city: address,  
      note: note,
      date: Date.now(),
      orderByUser: "المتجر",
      isAccepted: "Orders-New",
      country_calling_code: "+20",
      orderDate: showDate(),
      active: "Store",
      dataStore: dataStore,
      orderNumber: id,
    }).then(e=>{

    /**/
    Swal.fire(
      'تم ارسال الطلب',
      'سنقوم بالتواصل معك قريبا',
      'success'
    )
    /**/

    });

    document.querySelector(".formDad").style.display="none"
    document.querySelector(".NameOfPerson").value=""
    document.querySelector(".phoneNum").value=""
    document.querySelector(".address").value=""



  } else if(phoneNumber.length!=11){
    Swal.fire("برجاء كتابة رقم الهاتف بشكل صحيح","","error")
  } else {
    Swal.fire("برجاء كتابة البيانات بشكل صحيح","","error")
  };
});

/*end catch all product in cart and catch user info from inputs and send it to firebase */










/*start btn to hide cart div*/
document.querySelector(".btnCart").addEventListener("click", ()=>{
  document.querySelector(".divForCardsHasSelcDad").style.display="block"
  document.querySelector(".cartOk").addEventListener("click", ()=>{
    if(parseInt(document.querySelector(".totalPrice").innerText)!==0)
    {
      document.querySelector(".formDad").style.display="block"
    }
  })
})

document.querySelector(".btnToHide").addEventListener("click", ()=>{
  document.querySelector(".divForCardsHasSelcDad").style.display="none"
})
/*end btn to hide cart div*/












/* start on click */

window.onclick=async(e)=>{
      
     /* start imgBtnOpen */
     if([...e.target.classList].includes("search-btn")){
      Swal.fire({
        title: 'ادخل كود المنتج',
        input: 'number',
        inputValue: ``,
        inputAttributes: {
          autocapitalize: 'off'
        },
        showCancelButton: true,
        confirmButtonText: 'بحث',
        showLoaderOnConfirm: true,
        preConfirm: async(productNumberSearch) => {
  



        productNumberSearch=productNumberSearch.trim();

        if(productNumberSearch!==''){

          Swal.fire({
            title: 'Please Wait!',
            didOpen: () => {
              Swal.showLoading()
            }
          });


          let q = query(collection(db, "StoreProducts"), where('isHidden', '==', false), where("id", '==', productNumberSearch));
          let count = await getCountFromServer(q);
          
          count=count.data().count;
          console.log(count)
          if(count>0){
            location.href=location.origin+"/index.html?product="+productNumberSearch;
          }else {
            Swal.fire(
              'لا يوجد منتج بهذا الكود',
              '',
              'error'
            );
          };
              
        }else{
          Swal.fire(
            'Error',
            '',
            'error'
          );
        };

        }
      })
  
    };
    /* end imgBtnOpen */

   /* start imgBtnOpen */
   if(e.target.classList.value.includes("imgToOpen")){
    let src = e.target.src;



    console.log(ArrayOfProductImags)

    let element = document.createElement("div")
    element.classList.add("swiper-wrapper")
    console.log(element)

    ArrayOfProductImags.forEach(e=>{
      element.innerHTML+=`
      <div class="swiper-slide"><img class="" src="${e.src}" style="height:100%"></div>
      `
    })

    Swal.fire({
      html: `

      <div class="swiper">
        <!-- Additional required wrapper -->
        <div class="swiper-wrapper">
          <!-- Slides -->

          ${element.innerHTML}

         ...
        </div>
        <!-- If we need pagination -->
        <div class="swiper-pagination"></div>

        <!-- If we need navigation buttons -->
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>

        <!-- If we need scrollbar -->
        <div class="swiper-scrollbar"></div>
      </div>
      
      `,
      showConfirmButton: true,

    })







    

  new Swiper('.swiper', {
    // Optional parameters
    direction: 'horizontal',
    loop: true,
  
    // If we need pagination
    pagination: {
      el: '.swiper-pagination',
    },
  
    // Navigation arrows
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
  
    // And if we need scrollbar
    scrollbar: {
      el: '.swiper-scrollbar',
    },
  });








    
    // Swal.fire({
    //   imageUrl: src,
    //   imageWedith: 100,
    //   imageAlt: 'A tall image',
    //   customClass: {
    //     popup: 'widthContainer100',
    //   }
    // })

  };
  /* end imgBtnOpen */


  /* start detailsBtn */
  if(e.target.classList.value.includes("detailsBtn")){
    let note = e.target.dataset.note;
    
    Swal.fire(`${note}`);

  };
  /* end detailsBtn */



  /* start load more */
  if(e.target.classList.value.includes("LoadMore")){
    loadMore(4).then(e=>{
      AllProducts=[...AllProducts,...e];
      console.log(AllProducts)
      ShowAll(e);
    });
  };
  /* end load more */

  /* start load more */
  if(e.target.classList.value.includes("LoadFilter")){
    loadMoreWithFilter(4).then(e=>{
      AllProducts=e;
      ShowAll(e);
    });
  };
  /* end load more */


  
  /*start add card to cart*/

  if(e.target.classList.value.includes("btnForAddToCard")==true)
  {
    let src = e.target.parentNode.parentNode.querySelector(".cardImg").src;
    let nameOfCard = e.target.parentNode.parentNode.querySelector(".cardName").textContent;
    let priceOfCard = parseInt(e.target.parentNode.parentNode.querySelector(".price").innerText);
    let idOfCard = e.target.dataset.id;
    let noteOfCard = e.target.dataset.note;


    /**/
    if(arrayOfCardsHadAddToCart.includes(nameOfCard)==false)
    {
      arrayOfCardsHadAddToCart.push(nameOfCard)
      
      document.querySelector(".divForCardsHasSelc").innerHTML+=`
      
      <div class="cartDiv productNote" data-note="${noteOfCard}" data-price="${priceOfCard}" data-name="${nameOfCard}" data-src="${src}" data-number="">
        <img src="${src}" class="productImage" loading="lazy">
        <div class="nameOfCardDad">
          <bdi style="background-image: var(--main-bg)" class="productName" data-id="${idOfCard}">${nameOfCard}</bdi>
        </div>
        <div class="priceOfCardDad">
          <bdi class="productPrice">${priceOfCard} ${currency}</bdi>
        </div>
        <div class="quantityOfCardDad">
          <span class="low">-</span>
          <span style="width: 40px;" class="productAmount">1</span>
          <span class="height">+</span>
        </div>
        <div class="totalPriceOfCardDad">
          <bdi class="totalPriceCard productTotalPrice">${priceOfCard} ${currency}</bdi>
        </div>
        <div class="delOfCardDad">
          <img src="./Store Folder/images/delete.png" class="btnForDeletFromCart" loading="lazy">
        </div>
      </div>
      
      ` 
    } else {
      Swal.fire(
        'المنتج موجود في السلة بالفعل',
      )
    }

    totalPrice();
  };
  /*end add card to cart*/




  /* start remove from cart */
  if(e.target.classList.value.includes("btnForDeletFromCart")==true)
  {
    e.target.parentNode.parentNode.remove()
    totalPrice()
    let name = e.target.parentNode.parentNode.children[1].innerText

    for(let i = 0; i < arrayOfCardsHadAddToCart.length; i++){ 
      if(arrayOfCardsHadAddToCart[i].trim()===name.trim())
      {
        arrayOfCardsHadAddToCart.splice(i, 1);
      }
    }
  }
  /* end remove from cart */





  /* start height btn + */
  if(e.target.classList.value.includes("height")==true)
  {
    e.target.parentNode.children[1].innerText++
    let mainNum = parseInt(e.target.parentNode.children[1].innerText)
    let pricee = parseInt(e.target.parentNode.parentNode.children[2].innerText)
    // e.target.parentNode.parentNode.children[4].children[0].innerText=`${mainNum*pricee + `${currency}`}`
    e.target.parentNode.parentNode.querySelector(".productTotalPrice").innerText=`${mainNum*pricee + ` ${currency}`}`
    totalPrice()
  }
  /* end height btn + */



  

  /* start low btn + */
  if(e.target.classList.value.includes("low")==true)
  {
    if(Number(e.target.parentNode.children[1].innerText>1))
    {
      e.target.parentNode.children[1].innerText--
      let mainNum = parseInt(e.target.parentNode.children[1].innerText)
      let pricee = parseInt(e.target.parentNode.parentNode.children[2].innerText)
      e.target.parentNode.parentNode.querySelector(".productTotalPrice").innerText=`${mainNum*pricee + ` ${currency}`}`
    }
    totalPrice()
  }
  /* end low btn + */


};

/* end on click */









/* start show and hide form  */

document.querySelector(".hideForm").addEventListener("click", ()=>{
  hideForm()
})


function hideForm()
{
  document.querySelector(".formDad").style.display="none"
}

/* start show and hide form  */





/* start btn scroll */

let btnup = document.getElementById('btnup')

window.onscroll = function() {
  if (window.scrollY >= 200) {
    btnup.style.display = "block";
  } else {
    btnup.style.display = "none";
  }
};

btnup.onclick = function() {
  window.scrollTo({
    left: 0,
    top: 0,
    behavior: "smooth",
  })
}

/* end btn scroll */











/* 1 start function to get data now */
function showDate(){
  
  const d = new Date();
  
  let year = d.getFullYear();
  let month = d.getMonth();
  let day = d.getDate();
  let hour = d.getHours();
  let mint = d.getMinutes();
  
  if(mint<10){
    mint=`0${mint}`
  }
  
  let dateNow;


  if (hour>=12){
    
    dateNow= `
      ${year}/${month+1}/${day}
      => ${hour-12}:${mint} PM
      `;

  } else if (hour<=11){
    
      dateNow = `
      
      ${year}/${month+1}/${day}
         ${hour}:${mint} AM
      
      `;
  }
  return dateNow;
}

/* 1 end function to get data now */







/* start get bannar imgs */

async function showBannar(){

  let ThereBannerImgsSrc=[];

  let bannerImgs = JSON.parse(localStorage.getItem(`${docName}_bannerImgs`));


  if(bannerImgs!==null&&isTimestampGreaterThanDuration(Date.now() ,bannerImgs[3].time, 2)){
    console.log("banner from local")

    document.querySelector(".sliderImgOne").src=bannerImgs[0].BannarImg;
    document.querySelector(".sliderLinkOne").href=bannerImgs[0].BannarLink;

    document.querySelector(".sliderImgTwo").src=bannerImgs[1].BannarImg;
    document.querySelector(".sliderLinkTwo").href=bannerImgs[1].BannarLink;

    document.querySelector(".sliderImgThree").src=bannerImgs[2].BannarImg;
    document.querySelector(".sliderLinkThree").href=bannerImgs[2].BannarLink;

  }else{
    console.log("banner from database")


    await getDoc(doc(db,"Bannar","Bannar1")).then(e=>{
      document.querySelector(".sliderImgOne").src=e.data().BannarImg;
      document.querySelector(".sliderLinkOne").href=e.data().BannarLink;
  
      ThereBannerImgsSrc.push({
        BannarImg: e.data().BannarImg,
        BannarLink: e.data().BannarLink
      })
      
    })
    
    
    await getDoc(doc(db,"Bannar","Bannar2")).then(e=>{
      document.querySelector(".sliderImgTwo").src=e.data().BannarImg;
      document.querySelector(".sliderLinkTwo").href=e.data().BannarLink;
  
      ThereBannerImgsSrc.push({
        BannarImg: e.data().BannarImg,
        BannarLink: e.data().BannarLink
      })
  
    })
    
    
    await getDoc(doc(db,"Bannar","Bannar3")).then(e=>{
      document.querySelector(".sliderImgThree").src=e.data().BannarImg;
      document.querySelector(".sliderLinkThree").href=e.data().BannarLink;
  
      ThereBannerImgsSrc.push({
        BannarImg: e.data().BannarImg,
        BannarLink: e.data().BannarLink
      })
  
    })


    ThereBannerImgsSrc.push({
      time: Date.now(),
    })
  
    console.log(ThereBannerImgsSrc);
    localStorage.setItem(`${docName}_bannerImgs`,JSON.stringify(ThereBannerImgsSrc));

  }




  

  // let arrayOfImgsLocal=[];

  // async function preloadImages() {
  //   for (const e of ThereBannerImgsSrc) {
  //     let el = await returnImgLinkLocal(e.BannarImg);
  //     e.BannarImg = el;
  //     arrayOfImgsLocal.push({
  //       BannarImg: el,
  //       BannarLink: e.BannarLink
  //     });
  //   }
  
  //   console.log(arrayOfImgsLocal);
  // }

  // preloadImages();


};

/* end get bannar imgs */

function isTimestampGreaterThanDuration(timestamp1, timestamp2, durationInHours) {
  const durationInMilliseconds = durationInHours * 60 * 60 * 1000;

  const updatedTimestamp1 = timestamp2 + durationInMilliseconds;

  if (updatedTimestamp1 > timestamp1) {
    return true;
  } else {
    return false;
  }
}

async function returnImgLinkLocal(src) {
  let virtualContainer = document.createElement("div");
  virtualContainer.style.display = "block";
  virtualContainer.style.marginTop="10000px";


  let imgNew = document.createElement("img");
  imgNew.src = src;
  imgNew.style.width = "100%";
  virtualContainer.appendChild(imgNew);
  document.body.appendChild(virtualContainer);

  let localSrc = await new Promise((resolve) => {
    html2canvas(imgNew, {
      allowTaint: false,
      useCORS: true,
    }).then((canvas) => {
      let dataImg = new Image();
      let localSrc = canvas.toDataURL('image/png', 1.0);
      // console.log(localSrc);
      resolve(localSrc);
    });
  });

  document.body.removeChild(virtualContainer);
  return localSrc;
}



/* start function to save in local storage */


async function saveCartLocal(){
  await localStorage.setItem("divForCardsHasSelc",document.querySelector(".divForCardsHasSelc").innerHTML);
  await localStorage.setItem("numOfCardsAdd",document.querySelector(".numOfCardsAdd").textContent);
  await localStorage.setItem("arrayOfCardsHadAddToCart",JSON.stringify(arrayOfCardsHadAddToCart));
}



async function getCartFromLocal(){

  // console.log(localStorage.getItem("arrayOfCardsHadAddToCart"))

  if(localStorage.getItem("divForCardsHasSelc")!==null){
    document.querySelector(".divForCardsHasSelc").innerHTML=localStorage.getItem("divForCardsHasSelc");
  }

  if(localStorage.getItem("numOfCardsAdd")!==null){
    document.querySelector(".numOfCardsAdd").textContent=localStorage.getItem("numOfCardsAdd");
  } else if(localStorage.getItem("numOfCardsAdd")==null){
    document.querySelector(".numOfCardsAdd").textContent = 0;
  }

  if(localStorage.getItem("arrayOfCardsHadAddToCart")!==null){
    arrayOfCardsHadAddToCart=JSON.parse(localStorage.getItem("arrayOfCardsHadAddToCart"));
  } else if(localStorage.getItem("arrayOfCardsHadAddToCart")==null){
    arrayOfCardsHadAddToCart = [];
  }
};


/* end function to save in local storage */










/* start function to Filter Profucts With Categories */





/* start show all AllStoreCategories in her select */


async function AllStoreCategoriesInSelect(){

  let R = query(collection(db, "StoreCategories"), orderBy("date","desc"));
  const querySnapshot = await getDocs(R);
  const cityList = querySnapshot.docs.map(doc => doc.data());
  let array=cityList;


  document.querySelector("#AllStoreCategories").innerHTML=`
  
  <option value="AllStoreCategories">
  كل الاقسام 
  </option>

  `;

  let SliderProductsNames=[];
  array.forEach(async (e)=>{

    let q = query(collection(db, "StoreProducts"), where('isHidden', '!=', true), where('ProductCategorieId', '==', `${e.id}`));
    let snapshot = await getCountFromServer(q);
    // console.log(snapshot.data().count);
    document.querySelector("#AllStoreCategories").innerHTML+=`
      
      <option value="${e.id}">${e.name} (${snapshot.data().count})</option>
    
    `;


    SliderProductsNames.push(e.name);


  });


  let reversedArray = array.slice();
  let Categories= reversedArray.reverse();
  let arrayOfProducts = [];


  for(let i=0; i<Categories.length; i++){
    let result = await getProductsForSlider(Categories[i].name, 14);
    arrayOfProducts.push(result);
    if(i==Categories.length-1){

      let arrayOfCategoriesAndProducts={
        Categories: Categories,
        arrayOfProducts: arrayOfProducts, 
        time: Date.now()
      };

      localStorage.setItem(`${docName}_arrayOfCategoriesAndProducts`,JSON.stringify(arrayOfCategoriesAndProducts));

      for(let j=0; j<arrayOfCategoriesAndProducts.Categories.length; j++){
        let categorieName=arrayOfCategoriesAndProducts.Categories[j].name;
        let arrayOfProducts=arrayOfCategoriesAndProducts.arrayOfProducts[j];
        showSliderProducts(arrayOfProducts, categorieName);
      };

    }
  };





  

  

  // console.log(arrayOfCategoriesAndProducts)




  // arrayOfCategoriesAndProducts.Categories.forEach(e=>{
  //   console.log(e.name);
  //   console.log(arrayOfCategoriesAndProducts.arrayOfProducts);
    
   
  // });

  // arrayOfCategoriesAndProducts.arrayOfProducts.forEach(el=>{
  //   console.log(el)
  //   console.log("omar")
  // })




  // for(let i =0;i<arrayOfCategoriesAndProducts.Categories.length; i++){

  //   let categorieName = arrayOfCategoriesAndProducts.Categories[i].name;
  //   let array = arrayOfCategoriesAndProducts.arrayOfProducts;
  //   console.log(array)

  //   for(let j=0; j<array.length; j++){
  //     console.log(array[j])

  //     // showSliderProducts(e.products, categorieName);
  //   }

  // }

  

};


/* end show all AllStoreCategories in her select */






document.querySelector("#AllStoreCategories").addEventListener("change",async (e)=>{
  let FilterWith = e.target.value;
  let q;

  if(FilterWith=="AllStoreCategories"){
    document.querySelector(".LoadFilter").style.display="none";
    document.querySelector(".LoadMore").style.display="block";
    q = query(collection(db, "StoreProducts"), where('isHidden', '==', false), orderBy("date","desc"), limit(8));
  } else {
    document.querySelector(".LoadMore").style.display="none";
    document.querySelector(".LoadFilter").style.display="block";
    q = query(collection(db, "StoreProducts"), where('isHidden', '==', false),where("ProductCategorieId",'==',`${FilterWith}`), orderBy("date","desc"), limit(4));
  };
  const querySnapshot = await getDocs(q);
  const cityList = querySnapshot.docs.map(doc => doc.data());
  let array=cityList;
  AllProducts=array;
  document.querySelector(".cardsDad").innerHTML=``;
  ShowAll(array);

});


/* end function to Filter Profucts With Categories */























/* start function FormToSendOrder */



document.querySelector(".FormToSendOrder").addEventListener("submit",(e)=>{
  e.preventDefault();

  let name = document.querySelector(".FormToSendOrder").querySelector("#full_name").value.trim()
  let phoneNumber = document.querySelector(".FormToSendOrder").querySelector("#phone_number").value.trim()
  let address = document.querySelector(".FormToSendOrder").querySelector("#full_address").value.trim()
  let note = document.querySelector(".FormToSendOrder").querySelector("#full_note").value.trim()
  let active = document.querySelector(".ProductName").textContent.trim()


  if(document.querySelectorAll(".orderCoicesDiv").length>0){

    document.querySelectorAll(".orderCoicesDiv").forEach(e=>{
      let nameOfChoice =  e.querySelector(".nameOfChoice").textContent;
      let ChoicesSelect =  e.querySelector(".ChoicesSelect").value;
      let text = nameOfChoice + " : " + ChoicesSelect;
      note = `
      ${note} 
      ${text}
      `;
    });
  
    console.log(note);

  };

 

 if(name!=""&&phoneNumber.length==11&&address!="")
  {


    Swal.fire({
      title: 'Please Wait!',
      didOpen: () => {
        Swal.showLoading()
      }
    });


    let id = (Math.random()*1000000).toFixed();
    setDoc(doc(db,"Persons",`${id}`),{
      id: id,
      name: name,
      phone: phoneNumber,
      city: address,  
      note: note,
      date: Date.now(),
      orderByUser: "المتجر",
      isAccepted: "Orders-New",
      country_calling_code: "+20",
      orderDate: showDate(),
      active: `${active}`,
      orderNumber: id,
    }).then(e=>{


      document.querySelector(".FormToSendOrder").querySelector("#full_name").value=""
      document.querySelector(".FormToSendOrder").querySelector("#phone_number").value=""
      document.querySelector(".FormToSendOrder").querySelector("#full_address").value=""
      document.querySelector(".FormToSendOrder").querySelector("#full_note").value=""


      Swal.fire(
        'تم ارسال الطلب',
        'سنقوم بالتواصل معك قريبا',
        'success'
      )
    })

  } else if(phoneNumber.length!=11){
    Swal.fire("برجاء كتابة رقم الهاتف بشكل صحيح","","error")
  } else {
    Swal.fire("برجاء كتابة البيانات بشكل صحيح","","error")
  };

  return false;
});



/* end function FormToSendOrder */




let cssCode;
await getDoc(doc(db, "StoreTheme", `css`)).then(e=>{
  cssCode=e.data().code;
  document.querySelector(".themeStyle").textContent=cssCode;
});

let jsCode;
await getDoc(doc(db, "StoreTheme", `js`)).then(e=>{
  jsCode=e.data().code;
  // console.log(jsCode)
  // document.querySelector(".themeScript").innerHTML=jsCode;
  eval(`${jsCode}`)
});